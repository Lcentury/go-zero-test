// Code generated by goctl. DO NOT EDIT!
// Source: sts.proto

package stsclient

import (
	"context"

	"test/sts/rpc/types/sts"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteRequest  = sts.DeleteRequest
	DeleteResponse = sts.DeleteResponse
	FindRequest    = sts.FindRequest
	FindResponse   = sts.FindResponse
	InsertRequest  = sts.InsertRequest
	InsertResponse = sts.InsertResponse

	Sts interface {
		Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
		Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
		Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	}

	defaultSts struct {
		cli zrpc.Client
	}
)

func NewSts(cli zrpc.Client) Sts {
	return &defaultSts{
		cli: cli,
	}
}

func (m *defaultSts) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	client := sts.NewStsClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultSts) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	client := sts.NewStsClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultSts) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	client := sts.NewStsClient(m.cli.Conn())
	return client.Find(ctx, in, opts...)
}
