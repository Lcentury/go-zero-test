// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stsFieldNames          = builder.RawFieldNames(&Sts{})
	stsRows                = strings.Join(stsFieldNames, ",")
	stsRowsExpectAutoSet   = strings.Join(stringx.Remove(stsFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	stsRowsWithPlaceHolder = strings.Join(stringx.Remove(stsFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	stsModel interface {
		Insert(ctx context.Context, data *Sts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Sts, error)
		Update(ctx context.Context, data *Sts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Sts struct {
		Title string `db:"title"`
		Text  string `db:"text"`
		Id    int64  `db:"id"`
	}
)

func newStsModel(conn sqlx.SqlConn) *defaultStsModel {
	return &defaultStsModel{
		conn:  conn,
		table: "`sts`",
	}
}

func (m *defaultStsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStsModel) FindOne(ctx context.Context, id int64) (*Sts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stsRows, m.table)
	var resp Sts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStsModel) Insert(ctx context.Context, data *Sts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, stsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Text)
	return ret, err
}

func (m *defaultStsModel) Update(ctx context.Context, data *Sts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Text, data.Id)
	return err
}

func (m *defaultStsModel) tableName() string {
	return m.table
}
